{"version":3,"sources":["../tmp/transpiled/mSystem.js","../tmp/transpiled/membrane.js","../tmp/transpiled/mjs.js","../tmp/transpiled/rule.js"],"names":[],"mappings":"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","file":"membrane.js","sourcesContent":["define(\"MJS/mSystem\", \n  [\"MJS/mjs\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var MJS = __dependency1__[\"default\"];\n\n    var MSystem = function(params) {\n      _.assign(this, {\n        membrane: null,\n        world: {}\n      }, params);\n    };\n\n    MSystem.prototype.clone = function() {\n      return new MSystem({\n        membrane: this.membrane.clone(),\n        world: _.cloneDeep(this.world)\n      });\n    };\n\n    MSystem.prototype.simulate = function(stepLimit) {\n      var outCome = true;\n      stepLimit = stepLimit || 100;\n      MJS.log('simulating');\n      for (var i=0; i<stepLimit && outCome; ++i) {\n        MJS.log('- step: '+(i+1));\n        MJS.log('system world before: '+this.toString());\n        outCome = this.membrane.step(this.world);\n        if (outCome.dissolved)\n          throw 'Error: Outermost membrane dissolved';\n        MJS.log('system world after: '+this.toString());\n      }\n      if (i === stepLimit)\n        MJS.log('step limit('+stepLimit+') reached');\n      MJS.log('finished');\n    };\n    MSystem.prototype.toString = function() {\n      return this.worldToString() +' '+ this.membrane.toString();\n    };\n    MSystem.prototype.worldToString = function () {\n      return MJS.setToString(this.world);\n    };\n\n    MJS.MSystem = MSystem;\n    __exports__[\"default\"] = MSystem;\n  });","define(\"MJS/membrane\", \n  [\"MJS/mjs\",\"MJS/rule\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var MJS = __dependency1__[\"default\"];\n    var Rule = __dependency2__[\"default\"];\n\n    var idCounter = 0;\n\n    var Membrane = function(params) {\n      _.assign(this, {\n        // array of Rules\n        rules: [],\n        // set of object definitions symbol:count\n        world: {},\n        // children Membranes\n        membranes: [],\n        label: null,\n        charge: null\n      }, params);\n\n      if (typeof this.id === 'undefined')\n        this.id = ++idCounter;\n    };\n\n    Membrane.prototype.clone = function() {\n      var rules = _.map(this.rules, function(rule) { return rule.clone; }),\n          membranes = _.map(this.membranes, function(membrane) { return membrane.clone(); });\n      return new Membrane({\n        id: this.id,\n        rules: rules,\n        world: _.cloneDeep(this.world),\n        membranes: membranes,\n        label: this.label,\n        charge: this.charge\n      });\n    };\n\n    /**\n     * Simulates a single step for the membrane and its inner membranes\n     * @param  {object} externalWorld A world object set\n     * @return {bool/object} true if a rule was applied, false otherwise, {dissolved: true} if dissolved\n     */\n    Membrane.prototype.step = function(externalWorld) {\n      var self = this,\n          anyRulesApplied = false,\n          hasDissolved = false;\n\n      // Step inner membranes first\n      for (var i = 0; i < this.membranes.length; ++i) {\n        var membrane = this.membranes[i];\n        var result = membrane.step(self.world);\n        if (result.dissolved) {\n          MJS.log('dissolving '+membrane.id);\n          this.membranes.splice(i--, 1);\n        }\n        if (result) {\n          anyRulesApplied = true;\n        }\n      }\n\n      // Get all the rules that can apply\n      var applicableRules = [];\n      _.forEach(this.rules, function(rule) {\n        _.times(rule.numberApplications(self.world, self.membranes), function() {\n          applicableRules.push(rule);\n        });\n      });\n\n      MJS.log('membrane before: '+this.toString());\n\n      // Apply rules in random order and skip those that no longer apply\n      shuffle(applicableRules);\n      var oldWorld = _.cloneDeep(this.world);\n      _.forEach(applicableRules, function(rule) {\n        var result = rule.applyRule(oldWorld, self.world, self.membranes);\n        if (_.isObject(result)) {\n          _.forEach(result, function(count, symbol) {\n            if (typeof externalWorld[symbol] === 'undefined')\n              externalWorld[symbol] = 0;\n            externalWorld[symbol]+=count;\n          });\n        }\n        if (result) {\n          anyRulesApplied = true;\n          if (rule.type === Rule.Type.DISSOLVE) {\n            hasDissolved = true;\n            return false;\n          }\n        }\n      });\n\n      MJS.log('membrane after: '+this.toString());\n\n      if (hasDissolved)\n        return {dissolved: true};\n      return anyRulesApplied;\n    };\n    Membrane.prototype.toString = function() {\n      var world = this.worldToString();\n      var children = '';\n      _.forEach(this.membranes, function(membrane) {\n        children+=membrane.toString();\n      });\n      return '('+this.id+')['+(world.slice(1,world.length-1))+children+']';\n    };\n    Membrane.prototype.worldToString = function () {\n      return MJS.setToString(this.world);\n    };\n\n    //+ Jonas Raoni Soares Silva\n    //@ http://jsfromhell.com/array/shuffle [v1.0]\n    function shuffle(o){ //v1.0\n      for(var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\n      return o;\n    }\n\n    MJS.Membrane = Membrane;\n    __exports__[\"default\"] = Membrane;\n  });","define(\"MJS/mjs\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n\n    /**\n     * membrane.js global object\n     */\n    var MJS = {};\n\n    MJS.log = function(msg) {\n      if (console)\n        console.log(msg);\n      if (typeof $ !== 'undefined')\n        $('.log').prepend(msg+'<br>');\n    };\n\n    /**\n     * @param {[type]} set {symbol:count,...}\n     */\n    MJS.setToString = function(set) {\n      var chars = ['['];\n      _.forEach(set, function(count, symbol) {\n        _.times(count, function(){\n          chars.push(symbol);\n        });\n      });\n      chars.push(']');\n      return chars.join(' ');\n    };\n\n    MJS.selectRandomIn = function(xs) {\n      return xs[Math.floor(Math.random()*xs.length)];\n    };\n\n    MJS.cloneObjectArray = function(xs) {\n      return _.map(xs, function(x) {return x.clone;});\n    };\n\n    __exports__[\"default\"] = MJS;\n  });","define(\"MJS/rule\", \n  [\"MJS/mjs\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var MJS = __dependency1__[\"default\"];\n\n    var Rule = function(params) {\n      _.assign(this, {\n        type: Rule.Type.EVOLVE,\n        // symbols consumed by the rule\n        reactants: {},\n        // symbols generated by the rule\n        products: {},\n        charge: null,\n        label: null\n      }, params);\n\n      if (typeof this.type === 'undefined')\n        throw 'Unsupported Rule Type('+this.type+')';\n    };\n\n    Rule.prototype.clone = function() {\n      return new Rule({\n        type: this.type,\n        reactants: _.cloneDeep(this.reactants),\n        products: _.cloneDeep(this.products),\n        charge: this.charge,\n        label: this.label\n      });\n    };\n\n    /**\n     * Gets how many times a rule can be applied on the given world and membrane children\n     * @param {Object} world             Multiset of world objects\n     * @param {Array} childrenMembranes  List of the current membrane's children\n     * @return Number of times this rule can be applied\n     */\n    Rule.prototype.numberApplications = function(world, childrenMembranes) {\n      var self = this,\n          num = 0,\n          tempWorld = _.cloneDeep(world),\n          applied;\n      do {\n        applied = this.applyRule(tempWorld, MJS.cloneObjectArray(childrenMembranes));\n        if (applied) {\n          num+=1;\n        }\n      } while(applied);\n      return num;\n    };\n    /**\n     * Apply the rule to the given world. Only updates the world\n     * if it can actually apply the rule\n     * @param  {object} oldWorld {symbol:count,...} world to decrement but not add to\n     * @param  {object} world {symbol:count,...} (optional) world to both decrement and add to\n     * @param {Array} childrenMembranes  (optional) List of the current membrane's children\n     * @return {bool/object} Whether the rule was applied or not, or world set object if sending out\n     */\n    Rule.prototype.applyRule = function(oldWorld, world, childrenMembranes) {\n      var self = this,\n          applied = true,\n          sendOutSet = {};\n\n      if (_.isArray(world)) {\n        childrenMembranes = world;\n        world = null;\n      }\n\n      // First preprocess to check if all reactants exist and the rule can be applied\n      _.forEach(self.reactants, function(count, symbol) {\n        if (typeof oldWorld[symbol] === 'undefined' || oldWorld[symbol] < count) {\n          applied = false;\n          return false;\n        }\n      });\n\n      // Send in rules require some children membrane to send in to\n      if (this.type === Rule.Type.SEND_IN && (!childrenMembranes || childrenMembranes.length===0)) {\n        applied = false;\n      }\n\n      // Then apply if possible\n      if (applied) {\n        _.forEach(self.reactants, function(count, symbol) {\n          oldWorld[symbol]-= count;\n          if (world)\n            world[symbol]-= count;\n        });\n\n        if (world)\n          MJS.log('apply rule: '+this.toString());\n\n        _.forEach(self.products, function(count, symbol) {\n          var w = world;\n          if (self.type === Rule.Type.SEND_OUT ||\n              self.type === Rule.Type.DISSOLVE)\n          {\n            w = sendOutSet;\n          }\n          else if (self.type === Rule.Type.SEND_IN) {\n            w = MJS.selectRandomIn(childrenMembranes).world;\n          }\n\n          if (w && typeof w[symbol] === 'undefined')\n            w[symbol] = 0;\n          if (w)\n            w[symbol]+=count;\n        });\n      }\n\n      if (_.keys(sendOutSet).length) {\n        return sendOutSet;\n      }\n      return applied;\n    };\n    Rule.prototype.toString = function() {\n      return \"Rule(\"+this.type+\") react\"+MJS.setToString(this.reactants)+' prod'+MJS.setToString(this.products);\n    };\n\n    Rule.Type = {\n      EVOLVE: 'evolve',\n      SEND_OUT: 'sendOut',\n      DISSOLVE: 'dissolve',\n      SEND_IN: 'sendIn'\n      // TODO other rule types\n      //ELEMENTARY_DIVISION: 'elementaryDivision',\n      //NONELEMENTARY_DIVIONS: 'nonelementaryDivision'\n    };\n\n    MJS.Rule = Rule;\n    __exports__[\"default\"] = Rule;\n  });"]}